// Generated by Apple Swift version 4.0.3 effective-3.2.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("XCRPlayer")
@class UIPanGestureRecognizer;
@class AVPlayer;
@class NSCoder;
@class BMPlayerControlView;
@class XCRPlayerImageView;
@class UIButton;

SWIFT_CLASS("_TtC9XCRPlayer8BMPlayer")
@interface BMPlayer : UIView
@property (nonatomic, copy) void (^ _Nullable backBlock)(BOOL);
/// Gesture to change volume / brightness
@property (nonatomic, strong) UIPanGestureRecognizer * _Null_unspecified panGesture;
/// AVLayerVideoGravityType
@property (nonatomic, copy) NSString * _Nonnull videoGravity;
@property (nonatomic, readonly) BOOL isPlaying;
/// XCR添加
@property (nonatomic, readonly) double played;
@property (nonatomic, readonly) NSTimeInterval duration;
/// 是否静音
@property (nonatomic) BOOL isMuted;
@property (nonatomic) BOOL needBlackCover;
/// 只展示底部进度条
@property (nonatomic) BOOL onlyShowBottomProgress;
/// 自由控制全屏按钮事件
@property (nonatomic) BOOL customFullButtonClick;
@property (nonatomic, readonly) BOOL fullButtonSelected;
/// 播放完成后，重播
- (void)replayAfterEnding;
@property (nonatomic, copy) void (^ _Nullable playTimeDidChange)(NSTimeInterval, NSTimeInterval);
@property (nonatomic, copy) void (^ _Nullable playStateDidChange)(BOOL);
@property (nonatomic, readonly, strong) AVPlayer * _Nullable avPlayer;
/// 当customFullButtonClick = true, 此属性无效
@property (nonatomic) BOOL isFullScreen;
/// auto start playing, call at viewWillAppear, See more at pause
- (void)autoPlay;
/// Play
- (void)play;
/// Pause
/// \param allow should allow to response <code>autoPlay</code> function
///
- (void)pauseWithAllowAutoPlay:(BOOL)allow;
/// seek
/// \param to target time
///
- (void)seek:(NSTimeInterval)to completion:(void (^ _Nullable)(void))completion;
/// update UI to fullScreen
- (void)updateUI:(BOOL)isFullScreen;
/// 隐藏大进度条
- (void)showBottomProgressViewWithIsShow:(BOOL)isShow;
/// increade volume with step, default step 0.1
/// \param step step
///
- (void)addVolumeWithStep:(float)step;
/// decreace volume with step, default step 0.1
/// \param step step
///
- (void)reduceVolumeWithStep:(float)step;
/// prepare to dealloc player, call at View or Controllers deinit funciton.
- (void)prepareToDealloc;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCustomControllView:(BMPlayerControlView * _Nullable)customControllView;
- (nonnull instancetype)init;
/// 封面是否占位图
@property (nonatomic) BOOL needPlaceholder;
@property (nonatomic, copy) NSString * _Nullable imageUrl;
@property (nonatomic, strong) XCRPlayerImageView * _Null_unspecified imageView;
@property (nonatomic, strong) UIView * _Null_unspecified blackCover;
@property (nonatomic, strong) UIButton * _Null_unspecified replayButton;
- (void)preparePlayer;
@end



@class BMPlayerLayerView;

@interface BMPlayer (SWIFT_EXTENSION(XCRPlayer))
- (void)bmPlayerWithPlayer:(BMPlayerLayerView * _Nonnull)player playerIsPlaying:(BOOL)playing;
- (void)bmPlayerWithPlayer:(BMPlayerLayerView * _Nonnull)player loadedTimeDidChange:(NSTimeInterval)loadedDuration totalDuration:(NSTimeInterval)totalDuration;
- (void)bmPlayerWithPlayer:(BMPlayerLayerView * _Nonnull)player playTimeDidChange:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
@end

@class UISlider;

SWIFT_PROTOCOL("_TtP9XCRPlayer27BMPlayerControlViewDelegate_")
@protocol BMPlayerControlViewDelegate
/// call when control view choose a definition
/// \param controlView control view
///
/// \param index index of definition
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChooseDefition:(NSInteger)index;
/// call when control view pressed an button
/// \param controlView control view
///
/// \param button button type
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didPressButton:(UIButton * _Nonnull)button;
/// call when slider action trigged
/// \param controlView control view
///
/// \param slider progress slider
///
/// \param event action
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView slider:(UISlider * _Nonnull)slider onSliderEvent:(UIControlEvents)event;
@optional
/// call when needs to change playback rate
/// \param controlView control view
///
/// \param rate playback rate
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChangeVideoPlaybackRate:(float)rate;
/// 屏幕点击事件
- (void)tapGesClickWithProgressShowingWithControlView:(BMPlayerControlView * _Nonnull)controlView;
@end


@interface BMPlayer (SWIFT_EXTENSION(XCRPlayer)) <BMPlayerControlViewDelegate>
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChooseDefition:(NSInteger)index;
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didPressButton:(UIButton * _Nonnull)button;
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView slider:(UISlider * _Nonnull)slider onSliderEvent:(UIControlEvents)event;
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChangeVideoPlaybackRate:(float)rate;
- (void)tapGesClickWithProgressShowingWithControlView:(BMPlayerControlView * _Nonnull)controlView;
@end

@class UILabel;
@class BMTimeSlider;
@class UIProgressView;
@class XCRPlayerButton;
@class NVActivityIndicatorView;
@class UIImageView;
@class UITapGestureRecognizer;

SWIFT_CLASS("_TtC9XCRPlayer19BMPlayerControlView")
@interface BMPlayerControlView : UIView
@property (nonatomic, weak) id <BMPlayerControlViewDelegate> _Nullable delegate;
@property (nonatomic) NSInteger selectedIndex;
@property (nonatomic) BOOL isFullscreen;
@property (nonatomic) BOOL isMaskShowing;
@property (nonatomic) NSTimeInterval totalDuration;
/// main views which contains the topMaskView and bottom mask view
@property (nonatomic, strong) UIView * _Nonnull mainMaskView;
@property (nonatomic, strong) UIView * _Nonnull topMaskView;
@property (nonatomic, strong) UIView * _Nonnull bottomMaskView;
/// top views
@property (nonatomic, strong) UIButton * _Nonnull backButton;
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, strong) UIView * _Nonnull chooseDefitionView;
/// bottom view
@property (nonatomic, strong) UILabel * _Nonnull currentTimeLabel;
@property (nonatomic, strong) UILabel * _Nonnull totalTimeLabel;
/// Progress slider
@property (nonatomic, strong) BMTimeSlider * _Nonnull timeSlider;
/// load progress view
@property (nonatomic, strong) UIProgressView * _Nonnull progressView;
@property (nonatomic, strong) UIProgressView * _Nonnull bottomProgressView;
@property (nonatomic, strong) XCRPlayerButton * _Nonnull playButton;
@property (nonatomic, strong) XCRPlayerButton * _Nonnull fullscreenButton;
@property (nonatomic, strong) UILabel * _Nonnull subtitleLabel;
@property (nonatomic, strong) UIView * _Nonnull subtitleBackView;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable subtileAttrabute;
/// Activty Indector for loading
@property (nonatomic, strong) NVActivityIndicatorView * _Nonnull loadingIndector;
@property (nonatomic, strong) UIView * _Nonnull seekToView;
@property (nonatomic, strong) UIImageView * _Nonnull seekToViewImage;
@property (nonatomic, strong) UILabel * _Nonnull seekToLabel;
@property (nonatomic, strong) UIButton * _Nonnull replayButton;
/// Gesture used to show / hide control view
@property (nonatomic, strong) UITapGestureRecognizer * _Null_unspecified tapGesture;
/// call on when play time changed, update duration here
/// \param currentTime current play time
///
/// \param totalTime total duration
///
- (void)playTimeDidChangeWithCurrentTime:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
/// call on load duration changed, update load progressView here
/// \param loadedDuration loaded duration
///
/// \param totalDuration total duration
///
- (void)loadedTimeDidChangeWithLoadedDuration:(NSTimeInterval)loadedDuration totalDuration:(NSTimeInterval)totalDuration;
/// Call when User use the slide to seek function
/// \param toSecound target time
///
/// \param totalDuration total duration of the video
///
/// \param isAdd isAdd
///
- (void)showSeekToViewTo:(NSTimeInterval)toSecound total:(NSTimeInterval)totalDuration isAdd:(BOOL)isAdd;
- (void)playStateDidChangeWithIsPlaying:(BOOL)isPlaying;
/// auto fade out controll view with animtion
- (void)autoFadeOutControlViewWithAnimation;
/// cancel auto fade out controll view with animtion
- (void)cancelAutoFadeOutAnimation;
/// Implement of the control view animation, override if need’s custom animation
/// \param isShow is to show the controlview
///
- (void)controlViewAnimationWithIsShow:(BOOL)isShow duration:(double)duration;
/// Implement of the UI update when screen orient changed
/// \param isForFullScreen is for full screen
///
- (void)updateUI:(BOOL)isForFullScreen;
/// Call when video play’s to the end, override if you need custom UI or animation when played to the end
- (void)showPlayToTheEndView;
- (void)hidePlayToTheEndView;
- (void)showLoader;
- (void)hideLoader;
- (void)hideSeekToView;
- (void)showCoverWithLink:(NSString * _Nonnull)cover;
- (void)showCoverWithUrl:(NSURL * _Nullable)url;
- (void)hideCoverImageView;
- (void)prepareChooseDefinitionView;
/// Call when some action button Pressed
/// \param button action Button
///
- (void)onButtonPressed:(UIButton * _Nonnull)button;
/// Call when the tap gesture tapped
/// \param gesture tap gesture
///
- (void)onTapGestureTapped:(UITapGestureRecognizer * _Nonnull)gesture;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)changeTheme;
/// Add Customize functions here
- (void)customizeUIComponents;
@end




@class AVPlayerItem;
@class AVURLAsset;

SWIFT_CLASS("_TtC9XCRPlayer17BMPlayerLayerView")
@interface BMPlayerLayerView : UIView
/// 视频跳转秒数置0
@property (nonatomic) NSInteger seekTime;
/// 播放属性
@property (nonatomic, strong) AVPlayerItem * _Nullable playerItem;
/// 播放属性
@property (nonatomic, strong) AVPlayer * _Nullable player;
@property (nonatomic, copy) NSString * _Nonnull videoGravity;
@property (nonatomic) BOOL isPlaying;
- (void)playAssetWithAsset:(AVURLAsset * _Nonnull)asset;
- (void)play;
- (void)pause;
- (void)layoutSubviews;
- (void)resetPlayer;
- (void)prepareToDeinit;
- (void)onTimeSliderBegan;
- (void)seekToTime:(NSTimeInterval)secounds completionHandler:(void (^ _Nullable)(void))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9XCRPlayer12BMTimeSlider")
@interface BMTimeSlider : UISlider
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UIFont;

/// Activity indicator view with nice animations
SWIFT_CLASS("_TtC9XCRPlayer23NVActivityIndicatorView")
@interface NVActivityIndicatorView : UIView
/// Default color of activity indicator. Default value is UIColor.white.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull DEFAULT_COLOR;)
+ (UIColor * _Nonnull)DEFAULT_COLOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_COLOR:(UIColor * _Nonnull)value;
/// Default color of text. Default value is UIColor.white.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull DEFAULT_TEXT_COLOR;)
+ (UIColor * _Nonnull)DEFAULT_TEXT_COLOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_TEXT_COLOR:(UIColor * _Nonnull)value;
/// Default padding. Default value is 0.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat DEFAULT_PADDING;)
+ (CGFloat)DEFAULT_PADDING SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_PADDING:(CGFloat)value;
/// Default size of activity indicator view in UI blocker. Default value is 60x60.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGSize DEFAULT_BLOCKER_SIZE;)
+ (CGSize)DEFAULT_BLOCKER_SIZE SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_SIZE:(CGSize)value;
/// Default display time threshold to actually display UI blocker. Default value is 0 ms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD;)
+ (NSInteger)DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD:(NSInteger)value;
/// Default minimum display time of UI blocker. Default value is 0 ms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME;)
+ (NSInteger)DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME:(NSInteger)value;
/// Default message displayed in UI blocker. Default value is nil.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable DEFAULT_BLOCKER_MESSAGE;)
+ (NSString * _Nullable)DEFAULT_BLOCKER_MESSAGE SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_MESSAGE:(NSString * _Nullable)value;
/// Default font of message displayed in UI blocker. Default value is bold system font, size 20.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull DEFAULT_BLOCKER_MESSAGE_FONT;)
+ (UIFont * _Nonnull)DEFAULT_BLOCKER_MESSAGE_FONT SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_MESSAGE_FONT:(UIFont * _Nonnull)value;
/// Default background color of UI blocker. Default value is UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull DEFAULT_BLOCKER_BACKGROUND_COLOR;)
+ (UIColor * _Nonnull)DEFAULT_BLOCKER_BACKGROUND_COLOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_BACKGROUND_COLOR:(UIColor * _Nonnull)value;
/// Color of activity indicator view.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Padding of activity indicator view.
@property (nonatomic) CGFloat padding;
/// Current status of animation, read-only.
@property (nonatomic, readonly) BOOL animating;
/// Current status of animation, read-only.
@property (nonatomic, readonly) BOOL isAnimating;
/// Returns an object initialized from data in a given unarchiver.
/// self, initialized using the data in decoder.
/// \param decoder an unarchiver object.
///
///
/// returns:
/// self, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns the natural size for the receiving view, considering only properties of the view itself.
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
///
/// returns:
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Start animating.
- (void)startAnimating;
/// Stop animating.
- (void)stopAnimating;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end






SWIFT_CLASS("_TtC9XCRPlayer16XCRMoviePlayView")
@interface XCRMoviePlayView : UIView
/// 视频地址
@property (nonatomic, copy) NSString * _Nonnull itemUrlStr;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, strong) BMPlayer * _Null_unspecified qiniuPlayer;
@property (nonatomic) NSTimeInterval shouldSeekTime;
/// 只显示地步进度条
@property (nonatomic) BOOL onlyShowBottomProgress;
/// 封面是否占位图
@property (nonatomic) BOOL needPlaceholder;
/// 封面图
@property (nonatomic, copy) NSString * _Nullable imageUrl;
/// 封面比例，宽/高
@property (nonatomic) CGFloat picScale;
/// 是否静音
@property (nonatomic) BOOL isMuted;
@property (nonatomic, copy) NSString * _Nonnull videoGravity;
/// 自己处理重播按钮，4g提示按钮
@property (nonatomic) BOOL customButtonClick;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic) BOOL isFullscreen;
@property (nonatomic, readonly) NSTimeInterval played;
@property (nonatomic, readonly) NSTimeInterval duration;
- (void)replay;
- (void)play;
- (void)pause;
- (void)stop;
- (void)seek:(NSTimeInterval)to completion:(void (^ _Nullable)(void))completion;
- (void)wifiTipViewisHidden:(BOOL)isHidden;
- (void)showCoverImageWithNeedPlayButton:(BOOL)needPlayButton;
- (void)updateMovieSizeWithIsFullScreen:(BOOL)isFullScreen;
/// 4g情况下或者断网进入，手动点击播放按钮回调
@property (nonatomic, copy) void (^ _Nullable startPlayClick)(void);
- (void)showBottomProgressViewWithIsShow:(BOOL)isShow;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)playUrl:(NSString * _Null_unspecified)urlStr coverImageUrl:(NSString * _Nullable)coverImageUrl title:(NSString * _Nonnull)title isReplay:(BOOL)isReplay;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)bmPlayerWithPlayer:(BMPlayer * _Nonnull)player fullscreenButtonClick:(BOOL)isfullscreen;
- (void)bmPlayerWithPlayer:(BMPlayer * _Nonnull)player playerIsPlaying:(BOOL)playing;
- (void)bmPlayerWithPlayer:(BMPlayer * _Nonnull)player playTimeDidChange:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
- (void)bmPlayerWithPlayer:(BMPlayer * _Nonnull)player loadedTimeDidChange:(NSTimeInterval)loadedDuration totalDuration:(NSTimeInterval)totalDuration;
- (void)bmPlayerReplayClickWithPlayer:(BMPlayer * _Nonnull)player;
- (void)bmPlayerTapGesClickWithProgressShowingWithPlayer:(BMPlayer * _Nonnull)player;
- (void)deinitSelf;
@end

@class UIEvent;

SWIFT_CLASS("_TtC9XCRPlayer15XCRPlayerButton")
@interface XCRPlayerButton : UIButton
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// 带有点击效果的图片容器
SWIFT_CLASS("_TtC9XCRPlayer18XCRPlayerImageView")
@interface XCRPlayerImageView : UIImageView
/// 便利构造器
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// 便利构造器
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
